-1 represents ocean and 1 represents land find the number of islands in the given matrix.
Input:   n*n matrix
       1 -1 -1  1
      -1  1 -1  1
      -1 -1  1 -1
      -1 -1 -1  1
Output: 2 (two islands that I have 
bold in matrix at 1, 1 and 2, 2)

public class IslandCounter {
    public static void main(String[] args) {
        int[][] grid = {
            {1, -1, -1, 1},
            {-1, 1, -1, 1},
            {-1, -1, 1, -1},
            {-1, -1, -1, 1}
        };
        System.out.println("Number of islands: " + countIslands(grid));
    }

    public static int countIslands(int[][] grid) {
        int n = grid.length;
        boolean[][] visited = new boolean[n][n];
        int islandCount = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1 && !visited[i][j]) {
                    dfs(grid, visited, i, j, n);
                    islandCount++;
                }
            }
        }
        return islandCount;
    }

    private static void dfs(int[][] grid, boolean[][] visited, int i, int j, int n) {
        if (i < 0 || j < 0 || i >= n || j >= n || grid[i][j] != 1 || visited[i][j]) {
            return;
        }

        visited[i][j] = true;

        // Explore all four possible directions (up, down, left, right)
        dfs(grid, visited, i - 1, j, n); // up
        dfs(grid, visited, i + 1, j, n); // down
        dfs(grid, visited, i, j - 1, n); // left
        dfs(grid, visited, i, j + 1, n); // right
    }
}
